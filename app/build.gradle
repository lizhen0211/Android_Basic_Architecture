apply plugin: 'com.android.application'
def applicationVersionCode = 1
def applicationVersionName = "version_name"
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    useLibrary 'org.apache.http.legacy'
    signingConfigs {
        debug {
        }
        release {
        }
    }
    defaultConfig {
        applicationId "com.architecture"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode applicationVersionCode
        versionName applicationVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    sourceSets {
        main {
            java {
                srcDir 'src-gen'
            }
        }
    }

    flavorDimensions "default"
    productFlavors {
        other { dimension "default" }
        qh360 { dimension "default" }
        baidu { dimension "default" }
        pphelper { dimension "default" }
        wandoujia { dimension "default" }
        xiaomi { dimension "default" }
        huawei { dimension "default" }
        oppo { dimension "default" }
        vivo { dimension "default" }
        anzhi { dimension "default" }
        pgyer { dimension "default" }
        qq { dimension "default" }
    }

    productFlavors.all {
        flavor ->
            flavor.manifestPlaceholders = [CHANNEL_NAME: name]
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def apkPrefix = "pre";
            def fileName
            if (variant.buildType.name == "release") {
                // 输出apk名称为pre_versionname_channalname.apk
                fileName = apkPrefix + "_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
            } else {
                fileName = apkPrefix + "_${defaultConfig.versionName}_debug.apk"
            }
            outputFileName = fileName
        }
    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    implementation 'org.greenrobot:greendao:3.0.1'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.1'
    implementation ('com.prolificinteractive:material-calendarview:1.4.0'){
        exclude group: 'com.android.support'
    }
    implementation 'com.google.code.gson:gson:2.7'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
