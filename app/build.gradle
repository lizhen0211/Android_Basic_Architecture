apply plugin: 'com.android.application'
def applicationVersionCode = 1
def applicationVersionName = "version_name"
android {
    compileSdkVersion 21
    buildToolsVersion "24.0.0"
    signingConfigs {
        debug {
        }
        release {
        }
    }
    defaultConfig {
        applicationId "com.architecture"
        minSdkVersion 14
        targetSdkVersion 21
        versionCode applicationVersionCode
        versionName applicationVersionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    sourceSets {
        main {
            java {
                srcDir 'src-gen'
            }
        }
    }
    productFlavors {
        qh360 {
            applicationId "com.example.administrator.android_buide_sample.qh360"
        }
        baidu {
            applicationId "com.example.administrator.android_buide_sample.baidu"
        }
    }
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [CHANNEL_NAME: name]
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def apkPrefix = "pre";
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为pre_versionname_channalname.apk
                    fileName = apkPrefix + "_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                } else {
                    fileName = apkPrefix + "_${defaultConfig.versionName}_debug.apk"
                }
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'org.greenrobot:greendao:3.0.1'
    compile 'net.zetetic:android-database-sqlcipher:3.5.1'
    compile 'com.prolificinteractive:material-calendarview:1.4.0'
    compile 'com.squareup.leakcanary:leakcanary-android:1.4-beta2'
    compile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta2'
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}
